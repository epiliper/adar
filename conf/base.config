process {

    // Defaults for all processes
    cpus   = { check_max( 1    * task.attempt, 'cpus'   ) }
    memory = { check_max( 6.GB * task.attempt, 'memory' ) }
    time   = { check_max( 2.h  * task.attempt, 'time'   ) }

    errorStrategy = { task.exitStatus in [143,137,104,134,139] ? 'retry' : 'finish' }
    maxRetries    = 1
    maxErrors     = '-1'

    withLabel:process_single {
        cpus   = { check_max( 1                  , 'cpus'     ) }
        memory = { check_max( 6.GB   * task.attempt, 'memory' ) }
        time   = { check_max( 2.h    * task.attempt, 'time'   ) }
    }
    withLabel:process_low {
        cpus   = { check_max( 2      * task.attempt, 'cpus'   ) }
        memory = { check_max( 12.GB  * task.attempt, 'memory' ) }
        time   = { check_max( 4.h    * task.attempt, 'time'   ) }
    }
    withLabel:process_medium {
        cpus   = { check_max( 4     * task.attempt, 'cpus'    ) }
        memory = { check_max( 16.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 8.h   * task.attempt, 'time'    ) }
    }
    withLabel:process_high {
        cpus   = { check_max( 8     * task.attempt, 'cpus'    ) }
        memory = { check_max( 16.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 16.h  * task.attempt, 'time'    ) }
    }
	withLabel:process_low_java {
		cpus   = { check_max( 2     * task.attempt, 'cpus'    ) }
		memory = { check_max( 2.GB  * task.attempt, 'memory'  ) }
		time   = { check_max( 4.h   * task.attempt, 'time'    ) }
	}
	withLabel:process_medium_java {
		cpus   = { check_max( 4     * task.attempt, 'cpus'    ) }
		memory = { check_max( 4.GB  * task.attempt, 'memory'  ) }
		time   = { check_max( 8.h   * task.attempt, 'time'    ) }
	}
	withLabel:process_high_java {
		cpus   = { check_max( 8     * task.attempt, 'cpus'    ) }
		memory = { check_max( 8.GB  * task.attempt, 'memory'  ) }
		time   = { check_max( 16.h  * task.attempt, 'time'    ) }
	}
	withLabel:error_ignore {
        errorStrategy = 'ignore'
    }
    withLabel:error_retry {
        errorStrategy = 'retry'
        maxRetries    = 2
    }

}
