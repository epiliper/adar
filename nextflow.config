params {
	help = false

	// general params 
	input = null
	output = 'output'
	run_name = 'run'
	refs = null
	skip_dedup = false
	
	// fastp
	skip_fastp = false
	adapter_fasta = "${projectDir}/assets/adapter.fasta"

	// kraken2 options
	run_kraken2 = false
	kraken2_db = null
	save_kraken2_host_reads = false

	// resource usage (adjust these if you want beefier servers on AWS)
	max_cpus = 128
	max_memory = '256.GB'
	max_time = '48.h'

}

profiles {
	docker {
		docker.enabled = true
		platform = 'linux/amd64'

	}
}

def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
